name: Release Management

on:
  push:
    branches: [main, master]
  pull_request:
    types: [closed]
    branches: [main, master]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint and build
        run: |
          npm run lint
          npm run build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check for changes since last release
        id: check_changes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, proceeding with release"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # Check if there are conventional commits since the last tag
            COMMITS_SINCE_TAG=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^feat" --grep="^fix" --grep="^perf" --grep="^refactor" --grep="^BREAKING CHANGE" --grep="^chore" --grep="^docs" --regexp-ignore-case)

            if [ -n "$COMMITS_SINCE_TAG" ]; then
              echo "Found releasable commits since $LATEST_TAG"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No releasable commits found since $LATEST_TAG"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate release
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Generate new version and changelog
          npm run release:generate

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV

      - name: Push changes and tags
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push --follow-tags origin HEAD

      - name: Create GitHub Release
        if: steps.check_changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract release notes from CHANGELOG.md
          awk '/## \[/{if(++n==2) exit} n==1' CHANGELOG.md | sed '1d' > release_notes.md

          # Create the release
          gh release create "$NEW_VERSION" \
            --title "Release $NEW_VERSION" \
            --notes-file release_notes.md \
            --generate-notes