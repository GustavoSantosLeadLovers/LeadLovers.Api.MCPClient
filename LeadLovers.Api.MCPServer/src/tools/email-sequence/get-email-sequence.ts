import { GetEmailSequencesInput, getEmailSequencesSchema } from 'schemas/emailSequence';
import { LeadLoversAPIService } from 'services/leadlovers-api';
import { MCPToolResult, McpToolSchema } from 'types/mcp';
import { MessageFormatter } from '../../utils/message-formatter';
import { ZodError } from 'zod';

export const getEmailSequencesTool: McpToolSchema = {
  name: 'get_email_sequences',
  description: 'ObtÃ©m a lista de sequÃªncias de e-mail disponÃ­veis na conta do usuÃ¡rio LeadLovers',
  inputSchema: {
    type: 'object',
    properties: {
      machineCode: {
        type: 'number',
        description:
          'CÃ³digo da mÃ¡quina para a qual as sequÃªncias de e-mail serÃ£o obtidas (obrigatÃ³rio)',
      },
    },
    required: ['machineCode'],
  },
  outputSchema: {
    type: 'object',
    properties: {
      Items: {
        type: 'array',
        SequenceCode: { type: 'number', description: 'CÃ³digo da sequÃªncia de e-mail' },
        SequenceName: { type: 'string', description: 'Nome da sequÃªncia de e-mail' },
      },
    },
  },
};

export async function executeGetEmailSequences(
  args: unknown,
  apiService: LeadLoversAPIService
): Promise<MCPToolResult> {
  let validatedParams: GetEmailSequencesInput;
  try {
    validatedParams = getEmailSequencesSchema.parse(args);
  } catch (error) {
    if (error instanceof ZodError) {
      return MessageFormatter.formatValidationError(error);
    }
    return MessageFormatter.formatError({
      action: 'obter sequÃªncias de email',
      cause: 'ParÃ¢metros invÃ¡lidos fornecidos',
    });
  }

  const response = await apiService.getEmailSequences({
    machineCode: validatedParams.machineCode,
  });

  // Verifica se houve algum problema na resposta
  if (!response || !response.Items) {
    return MessageFormatter.formatError({
      action: 'obter sequÃªncias de email',
      cause: 'Resposta invÃ¡lida da API LeadLovers',
      suggestion: 'Verifique sua conexÃ£o e se o cÃ³digo da mÃ¡quina estÃ¡ correto',
    });
  }

  // Se nÃ£o hÃ¡ sequÃªncias
  if (response.Items.length === 0) {
    return MessageFormatter.formatSuccess({
      action: 'Busca realizada com sucesso',
      details: {
        MÃ¡quina: validatedParams.machineCode,
        Resultado: 'Nenhuma sequÃªncia de email encontrada',
      },
      contextInfo: [
        'ðŸ’¡ **Dica:** Crie sequÃªncias de email na sua mÃ¡quina para automatizar o envio de mensagens.',
      ],
    });
  }

  // Formatar lista de sequÃªncias de forma mais legÃ­vel
  const sequencesList = response.Items.map(
    (seq: any) => `â€¢ **${seq.SequenceName}** (CÃ³digo: ${seq.SequenceCode})`
  );

  return MessageFormatter.formatSuccess({
    action: `${response.Items.length} sequÃªncia(s) de email encontrada(s)`,
    details: {
      MÃ¡quina: validatedParams.machineCode,
    },
    contextInfo: [
      '**Lista de SequÃªncias:**',
      ...sequencesList,
      '\nðŸ’¡ **Dica:** Use o cÃ³digo da sequÃªncia para criar leads diretamente nela.',
    ],
  });
}
