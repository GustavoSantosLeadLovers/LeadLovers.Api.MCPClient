import { GetMachinesInput, getMachinesSchema } from 'schemas/machines';
import { LeadLoversAPIService } from 'services/leadlovers-api';
import { MCPToolResult, McpToolSchema } from 'types/mcp';
import { ZodError } from 'zod';
import { MessageFormatter, formatMachineSuccess } from '../../utils/message-formatter';

export const getMachinesTool: McpToolSchema = {
  name: 'get_machines',
  description: 'Obt칠m a lista de m치quinas dispon칤veis na conta do usu치rio LeadLovers',
  inputSchema: {
    type: 'object',
    properties: {
      page: { type: 'number', description: 'N칰mero da p치gina para pagina칞칚o (padr칚o: 1)' },
      registers: { type: 'number', description: 'N칰mero de registros por p치gina (padr칚o: 10)' },
      details: { type: 'number', description: 'Incluir detalhes das m치quinas (0 ou 1, padr칚o: 0)' },
      types: { type: 'string', description: 'Tipos de m치quinas a serem filtradas (opcional)' },
    },
  },
  outputSchema: {
    type: 'object',
    properties: {
      Items: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            MachineCode: { type: 'number', description: 'C칩digo da m치quina' },
            MachineName: { type: 'string', description: 'Nome da m치quina' },
            MachineImage: { type: 'string', description: 'URL da imagem da m치quina' },
            Views: { type: 'number', description: 'N칰mero de visualiza칞칫es da m치quina' },
            Leads: { type: 'number', description: 'N칰mero de leads na m치quina' },
          },
        },
      },
      CurrentPage: { type: 'number', description: 'P치gina atual da listagem' },
      Registers: { type: 'number', description: 'N칰mero total de registros' },
    },
  },
};

export async function executeGetMachines(
  args: unknown,
  apiService: LeadLoversAPIService
): Promise<MCPToolResult> {
  let validatedParams: GetMachinesInput;
  try {
    validatedParams = getMachinesSchema.parse(args);
  } catch (error) {
    if (error instanceof ZodError) {
      return MessageFormatter.formatValidationError(error);
    }
    return MessageFormatter.formatError({
      action: 'obter as m치quinas',
      cause: 'Par칙metros inv치lidos fornecidos',
    });
  }

  const machines = await apiService.getMachines(validatedParams);

  // Verifica se houve algum problema na resposta
  if (!machines || !machines.Items) {
    return MessageFormatter.formatError({
      action: 'obter a lista de m치quinas',
      cause: 'Resposta inv치lida da API LeadLovers ou nenhuma m치quina encontrada',
      suggestion: 'Verifique sua conex칚o e permiss칫es na conta LeadLovers',
    });
  }

  // Se n칚o h치 m치quinas
  if (machines.Items.length === 0) {
    return MessageFormatter.formatSuccess({
      action: 'Busca realizada com sucesso',
      details: {
        P치gina: validatedParams.page || 1,
        Resultado: 'Nenhuma m치quina encontrada',
      },
      contextInfo: [
        '游눠 **Dica:** Verifique se voc칡 possui m치quinas criadas em sua conta LeadLovers.',
      ],
    });
  }

  // Usar helper espec칤fico para m치quinas
  return formatMachineSuccess(machines.Items, machines.Registers || machines.Items.length);
}
